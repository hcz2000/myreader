package com.zhan.myreader.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zhan.myreader.greendao.entity.Stock;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STOCK".
*/
public class StockDao extends AbstractDao<Stock, String> {

    public static final String TABLENAME = "STOCK";

    /**
     * Properties of entity Stock.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Quantity = new Property(2, int.class, "quantity", false, "QUANTITY");
        public final static Property Cost = new Property(3, double.class, "cost", false, "COST");
        public final static Property LastPrice = new Property(4, double.class, "lastPrice", false, "LAST_PRICE");
        public final static Property Price = new Property(5, double.class, "price", false, "PRICE");
        public final static Property UpperThreshold = new Property(6, double.class, "upperThreshold", false, "UPPER_THRESHOLD");
        public final static Property LowerThreshold = new Property(7, double.class, "lowerThreshold", false, "LOWER_THRESHOLD");
        public final static Property SortCode = new Property(8, int.class, "sortCode", false, "SORT_CODE");
    }


    public StockDao(DaoConfig config) {
        super(config);
    }
    
    public StockDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STOCK\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"QUANTITY\" INTEGER NOT NULL ," + // 2: quantity
                "\"COST\" REAL NOT NULL ," + // 3: cost
                "\"LAST_PRICE\" REAL NOT NULL ," + // 4: lastPrice
                "\"PRICE\" REAL NOT NULL ," + // 5: price
                "\"UPPER_THRESHOLD\" REAL NOT NULL ," + // 6: upperThreshold
                "\"LOWER_THRESHOLD\" REAL NOT NULL ," + // 7: lowerThreshold
                "\"SORT_CODE\" INTEGER NOT NULL );"); // 8: sortCode
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STOCK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Stock entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getQuantity());
        stmt.bindDouble(4, entity.getCost());
        stmt.bindDouble(5, entity.getLastPrice());
        stmt.bindDouble(6, entity.getPrice());
        stmt.bindDouble(7, entity.getUpperThreshold());
        stmt.bindDouble(8, entity.getLowerThreshold());
        stmt.bindLong(9, entity.getSortCode());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Stock entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getQuantity());
        stmt.bindDouble(4, entity.getCost());
        stmt.bindDouble(5, entity.getLastPrice());
        stmt.bindDouble(6, entity.getPrice());
        stmt.bindDouble(7, entity.getUpperThreshold());
        stmt.bindDouble(8, entity.getLowerThreshold());
        stmt.bindLong(9, entity.getSortCode());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Stock readEntity(Cursor cursor, int offset) {
        Stock entity = new Stock( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.getInt(offset + 2), // quantity
            cursor.getDouble(offset + 3), // cost
            cursor.getDouble(offset + 4), // lastPrice
            cursor.getDouble(offset + 5), // price
            cursor.getDouble(offset + 6), // upperThreshold
            cursor.getDouble(offset + 7), // lowerThreshold
            cursor.getInt(offset + 8) // sortCode
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Stock entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setQuantity(cursor.getInt(offset + 2));
        entity.setCost(cursor.getDouble(offset + 3));
        entity.setLastPrice(cursor.getDouble(offset + 4));
        entity.setPrice(cursor.getDouble(offset + 5));
        entity.setUpperThreshold(cursor.getDouble(offset + 6));
        entity.setLowerThreshold(cursor.getDouble(offset + 7));
        entity.setSortCode(cursor.getInt(offset + 8));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Stock entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(Stock entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Stock entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
